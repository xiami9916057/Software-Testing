// Step 1. Include necessary header files such that the stuff your
// test logic needs is declared.
//
// Don't forget gtest.h, which declares the testing framework.


#include "nextdate.h"
#include "gtest/gtest.h"
#include <string>

using namespace std;

// Step 2. Use the TEST macro to define your tests.
//
// TEST has two parameters: the test case name and the test name.
// After using the macro, you should define your test logic between a
// pair of braces.  You can use a bunch of macros to indicate the
// success or failure of a test.  EXPECT_TRUE and EXPECT_EQ are
// examples of such macros.  For a complete list, see gtest.h.




TEST(NextDateTest, SimpleLoopCoverage){


	//Valid
	//M1 = {month : month has 30 days }
	//M2 = {month : month has 31 days }
	//M3 = {month : month is February }
	//D1 = {day : 1<=day<=27 }
	//D2 = {day : day=28 }
	//D3 = {day : day=29 }
	//D4 = {day : day=30 }
	//D5 = {day : day=31 }
	//Y1 = {year : year is a leap year }
	//Y2 = {year : year is a common year }	
	
	//Invalid 
	//M4 = {month : month<1 }
	//M5 = {month : month>12 }
	//D6 = {day : day<1 }
	//D7 = {day : day>31 }
	//Y3 = {year : year<1812 }
	//Y4 = {year : year>2012 }	

    //Decision Table
	//                   | 01 02 03 04 05 06 07 08 09 10 11 12 13 14 15 16 17 18 19 20 21 22
	//c1:Month in M1?    | M1 M1 M1 M1 M1 M2 M2 M2 M2 M2 M3 M3 M3 M3 M3 M4 M4 M4 M4 M4 M4 M4
	//c2:Month in M2?    | D1 D2 D3 D4 D5 D1 D2 D3 D4 D5 D1 D2 D3 D4 D5 D1 D2 D2 D3 D3 D4 D5 
	//c3:Month in M3?    | -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- Y1 Y2 Y1 Y2 -- -- 
    //-------------------+------------------------------------------------------------------
	//a1:Impossible      |             X                                            X  X  X                    
	//a2:Day Increase    | X  X  X        X  X  X  X     X  X  X  X     X  X                                                             
	//a3:Day Reset       |          X                 X              X        X  X                                
	//a4:Month Increase  |          X                 X                       X  X                                
	//a5:Month Reset     |                                           X                                  
	//a6:Year Increase   |                                           X                                
	
	/* DT01~03 */EXPECT_STREQ("2001.4.16",NextDate(4,15,2001).c_str());
	/* DT04    */EXPECT_STREQ("2001.5.1",NextDate(4,30,2001).c_str());
	/* DT05    */EXPECT_STREQ("Invalid",NextDate(4,31,2001).c_str());
	/* DT06~09 */EXPECT_STREQ("2001.1.16",NextDate(1,15,2001).c_str());
	/* DT10    */EXPECT_STREQ("2001.2.1",NextDate(1,31,2001).c_str());
	/* DT11~14 */EXPECT_STREQ("2001.12.16",NextDate(12,15,2001).c_str());
	/* DT15    */EXPECT_STREQ("2002.1.1",NextDate(12,31,2001).c_str());
	/* DT16    */EXPECT_STREQ("2001.2.16",NextDate(2,15,2001).c_str());
	/* DT17    */EXPECT_STREQ("2004.2.29",NextDate(2,28,2004).c_str());
	/* DT18    */EXPECT_STREQ("2001.3.1",NextDate(2,28,2001).c_str());	
	/* DT19    */EXPECT_STREQ("2004.3.1",NextDate(2,29,2004).c_str());			
	/* DT20    */EXPECT_STREQ("Invalid",NextDate(2,29,2001).c_str());	
	/* DT21~22 */EXPECT_STREQ("Invalid",NextDate(2,30,2001).c_str());				
	
} 




// Step 3. Call RUN_ALL_TESTS() in main().
//
// We do this by linking in src/gtest_main.cc file, which consists of
// a main() function which calls RUN_ALL_TESTS() for us.
//
// This runs all the tests you've defined, prints the result, and
// returns 0 if successful, or 1 otherwise.
//
// Did you notice that we didn't register the tests?  The
// RUN_ALL_TESTS() macro magically knows about all the tests we
// defined.  Isn't this convenient?

